#!/usr/bin/env python3
# coding: utf-8

# Each new term in the Fibonacci sequence is generated by adding the previous
# two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed
# four million, find the sum of the even-valued terms.

from itertools import takewhile

def main():
    sum_of_even_fibonacci_under_100 = \
        sum(takewhile(lambda x: x < 100, even_fibonacci()))
    sum_of_even_fibonacci_under_4000000 = \
        sum(takewhile(lambda x: x < 4000000, even_fibonacci()))
    print(f"The sum of the even-valued fibonacci terms below 100 is " \
        f"{sum_of_even_fibonacci_under_100}.")
    print(f"The sum of the even-valued fibonacci terms below 4000000 is " \
        f"{sum_of_even_fibonacci_under_4000000}.")

# Even fibonacci terms are:
#   2, 8, 34, 144, 610...
# and we can observe that
#   8   =   2*4 +  0
#   34  =   8*4 +  2
#   144 =  34*4 +  8
#   610 = 144*4 + 34
# so, we can define even_fibonacci as:
#   even_fibonacci(0) = 0
#   even_fibonacci(1) = 2
#   even_fibonacci(n) = even_fibonacci(n - 1)*4 + even_fibonacci(n - 2)
def even_fibonacci():
    before = 0
    actual = 2
    while True:
        yield actual
        before, actual = actual, actual*4 + before

if __name__ == "__main__":
    main()
